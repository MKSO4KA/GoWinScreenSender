// –§–∞–π–ª: main.go (–í–µ—Ä—Å–∏—è —Å –∑–æ–Ω–∞–ª—å–Ω—ã–º OCR, –∫–æ–Ω—Ñ–∏–≥–æ–º –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∏)
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"image"
	"image/jpeg"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const ocrWordLimit = 35

// --- –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è config.json ---
type Config struct {
	BotToken         string     `json:"bot_token"`
	ScreenshotTarget string     `json:"screenshot_target"`
	LogTarget        string     `json:"log_target"`
	OcrSpaceKeys     []string   `json:"ocr_space_keys"`
	AIProviders      []Provider `json:"ai_providers"`
}
type Provider struct {
	Name        string   `json:"name"`
	APIEndpoint string   `json:"api_endpoint"`
	ModelName   string   `json:"model_name"`
	Keys        []string `json:"keys"`
	Priority    int
}

// --- –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è AI ---
type ResponseFormat struct{ Type string `json:"type"` }
type APIRequest struct {
	Model          string          `json:"model"`
	Messages       []Message       `json:"messages"`
	MaxTokens      int             `json:"max_tokens"`
	Temperature    float32         `json:"temperature"`
	ResponseFormat *ResponseFormat `json:"response_format,omitempty"`
}
type Message struct{ Role, Content string }
type APIResponse struct{ Choices []Choice }
type Choice struct{ Message Message }

type AI_Activity_Output struct {
	PrimaryProgram       string `json:"primary_program"`
	UserActivitySentence string `json:"user_activity_sentence"`
	ActivityCategory     string `json:"activity_category"`
}
type AI_Hydra_Output struct {
	TaskName   string `json:"task_name"`
	Percentage int    `json:"percentage"`
	Progress   string `json:"progress"`
}

// --- –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è OCR ---
type OcrResponse struct {
	ParsedResults         []ParsedResult `json:"ParsedResults"`
	OCRExitCode           int            `json:"OCRExitCode"`
	IsErroredOnProcessing bool           `json:"IsErroredOnProcessing"`
	ErrorMessage          string         `json:"ErrorMessage"`
}
type ParsedResult struct{ ParsedText string `json:"ParsedText"` }

// --- –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∫–æ–¥–∞ ---
func getScreenshot() (*image.RGBA, error) {
	return captureScreen()
}

func getHydraScreenshot() ([]byte, error) {
	img, err := getScreenshot()
	if err != nil {
		return nil, err
	}

	bounds := img.Bounds()
	width := bounds.Dx()
	height := bounds.Dy()

	if width < 600 || height < 200 {
		return nil, fmt.Errorf("—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –∑–æ–Ω—ã 600x200")
	}

	cropRect := image.Rect(width-600, height-200, width, height)

	croppedImg, ok := img.SubImage(cropRect).(*image.RGBA)
	if !ok {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–µ–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
	}

	var buf bytes.Buffer
	if err := jpeg.Encode(&buf, croppedImg, nil); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ JPEG: %v", err)
	}
	return buf.Bytes(), nil
}

func getWindowTitles() ([]string, error) {
	return getAllVisibleWindowTitles()
}

// --- –õ–æ–≥–∏–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ---
func getTextFromImage(imageData []byte, ocrApiKeys []string, logFunc func(string)) (string, error) {
	if len(ocrApiKeys) == 0 || (len(ocrApiKeys) == 1 && ocrApiKeys[0] == "") {
		return "", fmt.Errorf("API –∫–ª—é—á –¥–ª—è OCR –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
	}
	url := "https://api.ocr.space/parse/image"
	var lastError error
	for _, apiKey := range ocrApiKeys {
		var requestBody bytes.Buffer
		writer := multipart.NewWriter(&requestBody)
		part, err := writer.CreateFormFile("file", "screenshot.jpg")
		if err != nil {
			lastError = err
			continue
		}
		_, err = io.Copy(part, bytes.NewReader(imageData))
		if err != nil {
			lastError = err
			continue
		}
		writer.WriteField("apikey", apiKey)
		writer.WriteField("language", "rus")
		writer.WriteField("scale", "true")
		writer.Close()
		req, err := http.NewRequest("POST", url, &requestBody)
		if err != nil {
			lastError = err
			continue
		}
		req.Header.Set("Content-Type", writer.FormDataContentType())
		client := &http.Client{Timeout: 45 * time.Second}
		resp, err := client.Do(req)
		if err != nil {
			lastError = err
			continue
		}
		defer resp.Body.Close()
		if resp.StatusCode != http.StatusOK {
			bodyBytes, _ := io.ReadAll(resp.Body)
			lastError = fmt.Errorf("OCR.space API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %s (—Ç–µ–ª–æ: %s)", resp.Status, string(bodyBytes))
			continue
		}
		var ocrResponse OcrResponse
		if err := json.NewDecoder(resp.Body).Decode(&ocrResponse); err != nil {
			lastError = err
			continue
		}
		if ocrResponse.IsErroredOnProcessing {
			lastError = fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ OCR.space: %s", ocrResponse.ErrorMessage)
			continue
		}
		if len(ocrResponse.ParsedResults) > 0 && ocrResponse.ParsedResults[0].ParsedText != "" {
			return ocrResponse.ParsedResults[0].ParsedText, nil
		}
	}
	logFunc(fmt.Sprintf("‚ö†Ô∏è OCR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", lastError))
	return "", lastError
}

// --- –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AI ---
func analyzeHydraTask(ocrText string, providers []Provider, logFunc func(string)) (*AI_Hydra_Output, error) {
	prompt := fmt.Sprintf(`
–¢–´ ‚Äî –ê–ù–ê–õ–ò–¢–ò–ö. –ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞.

–ó–ê–î–ê–ù–ò–ï: –í–µ—Ä–Ω–∏ JSON —Å 3 –∫–ª—é—á–∞–º–∏:
- "task_name": (string) –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.
- "percentage": (int) –ü—Ä–æ—Ü–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).
- "progress": (string) –ü—Ä–æ–≥—Ä–µ—Å—Å (—Ñ–æ—Ä–º–∞—Ç "X of Y").

–¢–ï–ö–°–¢:
%s`, ocrText)

	logFunc(fmt.Sprintf("---\n–î–∞–Ω–Ω—ã–µ –¥–ª—è AI (–ì–∏–¥—Ä–∞):\n%s\n---", ocrText))
	// ... (–î–∞–ª–µ–µ –ª–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è analyzeGeneralActivity, –Ω–æ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã AI_Hydra_Output)
}

func analyzeGeneralActivity(titles []string, truncatedOcrText string, providers []Provider, logFunc func(string)) (*AI_Activity_Output, error) {
	prompt := fmt.Sprintf(`
–¢–´ ‚Äî –ê–ù–ê–õ–ò–¢–ò–ö. –û–ø—Ä–µ–¥–µ–ª–∏ –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞–Ω–Ω—ã–º.

–ü–†–ò–û–†–ò–¢–ï–¢–´:
1. –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–∫–æ–Ω (–≥–ª–∞–≤–Ω–æ–µ).
2. OCR-—Ç–µ–∫—Å—Ç (–∫–æ–Ω—Ç–µ–∫—Å—Ç).

–ó–ê–î–ê–ù–ò–ï: –í–µ—Ä–Ω–∏ JSON —Å 3 –∫–ª—é—á–∞–º–∏:
- "primary_program": (string) –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
- "user_activity_sentence": (string) –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (10-15 —Å–ª–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º).
- "activity_category": (string) –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, –î–∏–∑–∞–π–Ω, –í–µ–±-—Å–µ—Ä—Ñ–∏–Ω–≥, –ì–µ–π–º–∏–Ω–≥, –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞, –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏).

–î–ê–ù–ù–´–ï:
1. –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–∫–æ–Ω:
%s
2. OCR-—Ç–µ–∫—Å—Ç (–∫–æ–Ω—Ç–µ–∫—Å—Ç, –¥–æ %d —Å–ª–æ–≤):
%s`, strings.Join(titles, "\n"), ocrWordLimit, truncatedOcrText)

	logFunc(fmt.Sprintf("---\n–î–∞–Ω–Ω—ã–µ –¥–ª—è AI (–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑):\n–ó–∞–≥–æ–ª–æ–≤–∫–∏: %s\nOCR: %s\n---", strings.Join(titles, "\n"), truncatedOcrText))
	// ... (–î–∞–ª–µ–µ –ª–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Å—Ç–∞—Ä–æ–º—É analyzeContent, –Ω–æ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã AI_Activity_Output)
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
func loadConfig(filename string) (*Config, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %w", err)
	}
	defer file.Close()

	var config Config
	decoder := json.NewDecoder(file)
	if err = decoder.Decode(&config); err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON: %w", err)
	}

	for i := range config.AIProviders {
		config.AIProviders[i].Priority = i
	}

	return &config, nil
}

func truncateTextByWords(text string, limit int) string {
	words := strings.Fields(text)
	if len(words) <= limit {
		return text
	}
	return strings.Join(words[:limit], " ")
}

// --- –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram ---
func sendLog(bot *tgbotapi.BotAPI, logTargetInfo, errorMessage string) {
	if bot == nil || logTargetInfo == "" {
		return
	}
	parts := strings.Split(logTargetInfo, ":")
	if len(parts) != 2 {
		return
	}
	groupID, errGroup := strconv.ParseInt(parts[0], 10, 64)
	topicID, errTopic := strconv.Atoi(parts[1])
	if errGroup != nil || errTopic != nil {
		return
	}
	fullMessage := fmt.Sprintf("üìù –õ–æ–≥ ScreenSender:\n\n%s", errorMessage)
	msg := tgbotapi.NewMessage(groupID, fullMessage)
	msg.ReplyToMessageID = topicID
	bot.Send(msg)
}

func processAndSend(bot *tgbotapi.BotAPI, screenshotTargetInfo string, photoData []byte, caption string, logFunc func(string)) {
	if bot == nil || screenshotTargetInfo == "" {
		logFunc("ID –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω.")
		return
	}
	parts := strings.Split(screenshotTargetInfo, ":")
	if len(parts) != 2 {
		logFunc(fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: %s", screenshotTargetInfo))
		return
	}
	groupID, errGroup := strconv.ParseInt(parts[0], 10, 64)
	topicID, errTopic := strconv.Atoi(parts[1])
	if errGroup != nil || errTopic != nil {
		logFunc("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ID –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.")
		return
	}

	file := tgbotapi.FileBytes{Name: "screenshot.jpg", Bytes: photoData}
	msg := tgbotapi.NewPhoto(groupID, file)
	msg.Caption = caption
	msg.ReplyToMessageID = topicID
	if _, err := bot.Send(msg); err != nil {
		logFunc(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: %v", err))
	}
}

// --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
func main() {
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ ScreenSender...")

	config, err := loadConfig("config.json")
	if err != nil {
		log.Fatalf("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: %v", err)
	}

	if config.BotToken == "" || config.ScreenshotTarget == "" {
		log.Fatal("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: 'bot_token' –∏ 'screenshot_target' –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ –≤ config.json.")
	}

	bot, err := tgbotapi.NewBotAPI(config.BotToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %v", err)
	}

	logAndSend := func(errMsg string) {
		log.Println(errMsg)
		sendLog(bot, config.LogTarget, errMsg)
	}

	// --- –®–ê–ì 1: –ó–æ–Ω–∞–ª—å–Ω—ã–π OCR –¥–ª—è "–ì–∏–¥—Ä—ã" ---
	logAndSend("–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω—ã '–ì–∏–¥—Ä–∞' (600x200, –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª).")
	hydraImageData, err := getHydraScreenshot()
	if err != nil {
		logAndSend(fmt.Sprintf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∑–æ–Ω—ã '–ì–∏–¥—Ä–∞': %v", err))
	} else {
		hydraOcrText, err := getTextFromImage(hydraImageData, config.OcrSpaceKeys, logAndSend)
		if err != nil {
			logAndSend(fmt.Sprintf("‚ö†Ô∏è OCR –¥–ª—è –∑–æ–Ω—ã '–ì–∏–¥—Ä–∞' –Ω–µ —É–¥–∞–ª—Å—è: %v", err))
		} else if strings.Contains(hydraOcrText, "%") || len(strings.Fields(hydraOcrText)) > 2 { // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
			logAndSend("‚úÖ –í–æ–∑–º–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ '–ì–∏–¥—Ä–∞' –Ω–∞–π–¥–µ–Ω–∞! –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...")
			hydraResult, err := analyzeHydraTask(hydraOcrText, config.AIProviders, logAndSend)
			if err != nil || hydraResult == nil {
				logAndSend(fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å '–ì–∏–¥—Ä—ã': %v. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—â–µ–º—É –∞–Ω–∞–ª–∏–∑—É.", err))
			} else {
				fullScreenshotImg, _ := getScreenshot()
				var buf bytes.Buffer
				jpeg.Encode(&buf, fullScreenshotImg, nil)

				caption := fmt.Sprintf("–ó–∞–¥–∞—á–∞: %s\n–ü—Ä–æ–≥—Ä–µ—Å—Å: %d%% (%s)",
					hydraResult.TaskName, hydraResult.Percentage, hydraResult.Progress)

				processAndSend(bot, config.ScreenshotTarget, buf.Bytes(), caption, logAndSend)
				logAndSend("‚úÖ –ó–∞–¥–∞—á–∞ '–ì–∏–¥—Ä–∞' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
				return
			}
		} else {
			logAndSend("‚ÑπÔ∏è '–ì–∏–¥—Ä–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–æ–Ω–µ. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—â–µ–º—É –∞–Ω–∞–ª–∏–∑—É.")
		}
	}

	// --- –®–ê–ì 2: –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ "–ì–∏–¥—Ä–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞) ---
	logAndSend("–®–∞–≥ 2: –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
	fullScreenshotImg, err := getScreenshot()
	if err != nil {
		logAndSend(fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: %v", err))
		return
	}
	titles, err := getWindowTitles()
	if err != nil {
		logAndSend(fmt.Sprintf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–∫–æ–Ω: %v", err))
		titles = []string{}
	}

	var buf bytes.Buffer
	jpeg.Encode(&buf, fullScreenshotImg, nil)
	fullScreenshotBytes := buf.Bytes()

	fullOcrText, _ := getTextFromImage(fullScreenshotBytes, config.OcrSpaceKeys, logAndSend)
	truncatedOcrText := truncateTextByWords(fullOcrText, ocrWordLimit)

	analysisResult, err := analyzeGeneralActivity(titles, truncatedOcrText, config.AIProviders, logAndSend)
	var caption string
	if err != nil || analysisResult == nil {
		caption = "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
	} else {
		caption = analysisResult.UserActivitySentence
	}

	processAndSend(bot, config.ScreenshotTarget, fullScreenshotBytes, caption, logAndSend)
	logAndSend("‚úÖ –û–±—â–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
}